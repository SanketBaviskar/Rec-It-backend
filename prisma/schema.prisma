generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement()) // Primary key
  email        String     @unique
  password     String?
  firstName    String
  middleName   String?
  lastName     String
  role         String?   @default("0")
  status       String?
  avatar       String?
  phone        String?
  address      String?
  gender       String?
  dateOfBirth  DateTime?
  memberships   UserMembership[]
  accessId     String?    @unique
  studentId    Int?       @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Membership {
  id          Int     @id @default(autoincrement()) // Primary key for Membership
  name        String
  description String?
  price       Float?
  createdAt     DateTime        @default(now()) 
  updatedAt     DateTime        @updatedAt      
  userMemberships UserMembership[]
}

model UserMembership {
  id            Int             @id @default(autoincrement())
  userId        Int             // Foreign key to User
  membershipId  Int             // Foreign key to Membership
  startDate     DateTime        // When the membership started
  endDate       DateTime?       // When the membership ended (null if active)
  createdAt     DateTime        @default(now()) // Record creation timestamp
  updatedAt     DateTime        @updatedAt      // Record last update timestamp

  user          User            @relation(fields: [userId], references: [id])
  membership    Membership      @relation(fields: [membershipId], references: [id])

  @@index([userId])             // Index for quick lookups by user
  @@index([membershipId])       // Index for quick lookups by membership
  @@index([userId, membershipId]) // Compound index for efficient queries on user+membership
}

model Inventory {
  id          Int          @id @default(autoincrement())
  name        String       // Name of the inventory category
  description String?      // Brief description of the inventory category
  location    String       // Location within the rec center
  manager     String       // Manager responsible for the inventory
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  equipments  Equipment[]  // One-to-many relationship with Equipment
  isInventory Boolean         // is it an inventory or product 

  @@map("Inventories")
}

model Equipment {
  id              Int          @id @default(autoincrement())
  name            String       // Name of the equipment
  code            String       // Equipment code
  image           String?      // Equipment image
  quantity        Int          // Quantity of the equipment
  price           Float        // Price of the equipment
  replacementFees Float        // Replacement fees for the equipment
  description     String?      // Brief description of the equipment
  location        String       // Location of the equipment
  inventory       Inventory    @relation(fields: [inventoryId], references: [id])
  inventoryId     Int          // Foreign key to Inventory
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("Equipments")
}